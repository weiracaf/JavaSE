package yuan.learn.basic;
@SuppressWarnings({"all"})
//本篇主要讲代码块（初始化块）奥
//代码块简而言之就是构造器的补充机制，应为构造器的重载，可能构造器前几句都一样，就后面进行改变，可以把这几句相同的放到代码块里
//new的时候，代码块先运行，构造器再运行所以跟之前的效果其实是一样的
//静态代码块和普通代码块不同
//静态代码块只会执行一次，在类加载的时候(类只会加载一次)
//类加载的时机
//1.创建对象实例的时候（new）

//2.创建子类对象实类的时候，父类也会被加载！！！因为对应构造器调用父类的构造器

//3.使用该类的静态成员变量时，该类也会加载
//普通代码块，在创建类对象的时候才调用，创建一个对象(或者其子类)调用一次，只调用类的静态成员的不会调用
//根据上面的知识点可以总结，在创建子类对象时，一个代码块、构造方法、静态属性的运行规则
//1.父类的静态代码块和静态属性（优先级一样）
//2.子类的静态代码块和静态属性（优先级一样）
//3.父类的普通代码块和普通属性初始化
//4.父类的构造方法
//5.子类的普通代码块和子类的普通属性初始化
//6.子类的构造方法
public class CodeBlock {
public static void main(String[] args) {
	//code.c();//静态代码块（调用静态方法，类加载不过之后执行静态代码块）
	//code code2 = new code();//新建对象，普通代码块执行，静态代码块只会执行一次
	//c c = new c();//这个也会执行普通代码块
	
	c.e();
}	
}

class code{	//代码块前面可以加修饰符不过只能+static，加static叫静态代码块，不加的话就是普通代码块
	public static String name;
	static{
		System.out.println("code静态代码块");
	};//;写不写都可以
	
	{
		System.out.println("code普通代码块");
	}
	//这个就叫代码块，与方法不同，没有方法名参数返回值，只有方法体，而且不通过对象或类显式调用，而是在加载类/创建对象的时候隐式调用
	public static void c() {
		System.out.println("c");
	}
}
class c extends code{
	public static void e() {
		System.out.println("e方法");
	}
}
