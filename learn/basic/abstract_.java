package yuan.learn.basic;
//本篇主要讲abstract关键字，抽象类，抽象方法
public class abstract_ {
	//抽象方法、抽象类是用来干嘛的？
	//我们定义一个父类
	//比如说动物，细分到每一个动物我们知道他们爱吃什么
	//但是动物的话，就有不确定性，你可能会写这是一个动物，不知道爱吃什么
	//（明显是瞎写的，就等着继承改变这句话，来输出重写的方法，这个时候父类的方法体就显的不那么重要，甚至有点多余）
	//这个方法不能确定怎么去实现，你又不想硬去实现
	//这个时候就可以用到我们的抽象类（抽象方法）

public static void main(String[] args) {
	Object [][] a=new Object[2][3];
}
}
@SuppressWarnings({"all"})
abstract class wolf{	//类前加abstract关键字就是抽象类
	private String name;
	public abstract void eat();	//同理方法前有abstract就叫抽象方法,就是没有方法体的方法，需要子类进行重写来实现具体方法
	//注意：抽象方法一定在抽象类中
	
	
}
//抽象类使用注意
/*
 * 1.抽象列不能实例化！！！
 * 
 * 2.抽象类不一定要包含abstract方法（可以不含抽象方法）
 * 
 * 3.含抽象方法的一定是抽象类
 * 
 * 4.abstract只能修饰类和方法（不能修饰属性和其他的）
 * 
 * 5.抽象类可以有任意成员（非抽象方法，构造器，静态属性等等）
 * 
 * 6.抽象方法不能有方法体（实现）
 * 
 * 7.如果一个类继承了抽象类，必须重写这个抽象类的所有抽象方法（除非这个类也是抽象类）
 * 
 * 8.抽象方法不用static，final和private修饰，因为这与重写相违背
 */
//由抽象类衍生出一种设计模式
/*
 * 1.创建抽象类模板，以不同的段作为抽象方法
 * 
 * 2.创建普通方法，把相同的代码复制上，然后不同的代码调用之前创建的抽象方法
 * 
 * 3.创建子类具体重写抽象方法
 * 
 * 4.在实际应用类中，用创建对象完成方法的调用（相同代码调用父类的，不同的调用子类的）
 */
