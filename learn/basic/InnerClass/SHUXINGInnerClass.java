package yuan.learn.basic.InnerClass;
//本篇主要讲课内部类奥

//类的五大成员：属性，方法，构造器，代码块和内部类
//内部类就是在内部定义的类
//该类最大的特点就是可以直接访问私有属性
//内部类分为四种：1.成员内部类2.静态内部类3.匿名内部类（重点）4.局部内部类
//四种类的区别方式：主要的定义的区域（1.外部类成员位置：和方法属性一个量级2.定义在方法内，和局部变量一个量级）
//这两种定义区域又分为两种不同的内部类
//先看1：一：没用static修饰的普通（成员）内部类 二：用static修饰的静态内部类
//2.一：没有类名的匿名内部类 二：有类名的局部内部类
public class SHUXINGInnerClass {
	public class InnerClassA {//这个就是成员内部类啦
        //在这种定义方式下，成员内部类对象依赖外部类对象而存在，即在创建一个普通内部类对象时首先需要创建其外部类对象

		//当然可以在方法里创建
    }
	SHUXINGInnerClass.InnerClassA a = new InnerClassA();//就这样依赖的辣
	//Demo01 demo01 = new Demo01();	 
    //Demo01.A a2=demo01.new A();//在其他类中创建Demo01的内部类A
	//先创建一个Demo01，然后用这个变量创建A，因为这个内部类相当于人家Demo01一个属性，所以肯定先要建外部类取属性了
	//内部类对象可以访问外部类对象中所有访问权限的字段，同时，外部类对象也可以通过内部类的对象引用来访问内部类中定义的所有访问权限的字段
	
	static class A{//这种就是静态内部类啦
		
	}
	public static void main(String[] args) {
		//就关于匿名内部类和局部内部类我再开一个类吧
	}
}
//1.成员内部类
/*
 * 细节 1.可以直接使用外部类成员（包括private）
 * 
 * 2.定义在外部的成员位置上
 * 
 * 3.可以添加任何的访问修饰符（因为它是一个成员）
 * 
 * 4.作用域，和其他成员一样，为整个类体
 * 
 * 5.成员内部类访问外部类成员――>直接访问
 * 
 * 6.外部类访问成员内部类，先创建对象后访问
 * 
 * 7.外部其他类访问内部类，先创建外部类对象，再创建内部类对象（上面有案例哦）
 */

//2.静态内部类
/*
 * 细节 1.放在外部类成员位置并用static修饰
 * 
 * 2.静态类可以访问外部类静态成员（包括私有），但是不能访问非静态成员
 * 
 * 3.可以添加任意访问修饰符
 * 
 * 4.作用域：整个类体
 * 
 * 5.静态内部类访问外部类（比如静态属性）――>直接访问
 * 
 * 6.外部类访问静态内部类――>先创建对象再访问 （内部类名 引用名=new 构造器）
 * 
 * 7.外部其他类访问静态内部类
 * 
 * （1）外部类名.静态内部类名 引用名=new 外部类名.构造器（下面有案例哦）
 * 
 * （2）编写一个普通方法返回静态内部类的对象实例（先创建外部类，再通过外部类对象调用方法）
 * 
 * （3）编写一个静态方法，返回对象实例（可以直接类名.方法名（）;调用）因为普通方法不能直接调用静态属性
 * 
 * 8.如果外部类和静态内部类重名，也是就近原则，可以通过类名.成员名访问外部类成员
 * 
 * 一些小理解：我们知道，一个类的静态成员独立于这个类的任何一个对象存在，只要在具有访问权限的地方，我们就可以通过 类名.静态成员名 的形式来访问这个静态成员
 * 同样的，静态内部类也是作为一个外部类的静态成员而存在，创建一个类的静态内部类对象不需要依赖其外部类对象。例
 * Demo01.A a=new Demo01.A();//A是静态内部类，Demo01是A的外部类
 * 可以看到，静态内部类就像外部类的一个静态成员一样，创建其对象无需依赖外部类对象（访问一个类的静态成员也无需依赖这个类的对象，因为它是独立于所有类的对象的）。
 * 但是于此同时，静态内部类中也无法访问外部类的非静态成员，因为外部类的非静态成员是属于每一个外部类对象的
 * 而本身静态内部类就是独立外部类对象存在的，所以静态内部类不能访问外部类的非静态成员
 * 而外部类依然可以访问静态内部类对象的所有访问权限的成员，这一点和普通内部类无异。
 * 
 */



